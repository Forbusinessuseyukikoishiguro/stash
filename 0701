# Git Stash 完全ガイド & チートシート

## はじめに

Git Stash（スタッシュ）は、作業中の変更を一時的に保存して、後で復元できる非常に便利な機能です。ブランチ切り替えや緊急作業が必要な際に、コミットする前の作業を安全に保管できます。

## スタッシュとは？

- **目的**: 作業途中の変更を一時保存
- **仕組み**: ワーキングディレクトリとインデックスの状態をスタックに保存
- **利点**: コミット履歴を汚さずに作業を中断・再開可能

## 基本的な使い方

### 1. スタッシュの作成

```bash
# 基本的なスタッシュ
git stash

# メッセージ付きスタッシュ
git stash save "ログイン機能実装中"

# 推奨：現在の書き方
git stash push -m "ユーザー登録画面の改修中"
```

### 2. スタッシュの確認

```bash
# スタッシュ一覧
git stash list

# 特定スタッシュの内容確認
git stash show stash@{0}
git stash show -p stash@{1}  # 詳細な差分表示
```

### 3. スタッシュの復元

```bash
# 最新スタッシュを適用して削除
git stash pop

# 最新スタッシュを適用（保持）
git stash apply

# 特定スタッシュを指定
git stash pop stash@{2}
git stash apply stash@{1}
```

## 実践的なシナリオ

### シナリオ1: 緊急バグ修正

```bash
# 1. 現在の作業をスタッシュ
git stash push -m "新機能開発中"

# 2. バグ修正ブランチに切り替え
git checkout hotfix/critical-bug

# 3. バグ修正作業
# ... 修正作業 ...
git add .
git commit -m "緊急バグ修正"

# 4. 元のブランチに戻る
git checkout feature/new-function

# 5. 作業を復元
git stash pop
```

### シナリオ2: 実験的変更の一時保存

```bash
# 実験的な変更をスタッシュ
git stash push -m "UIの色調整実験"

# 別のアプローチを試す
# ... 他の実装 ...

# 実験版を確認したい場合
git stash show -p stash@{0}

# 実験版を復元
git stash apply stash@{0}
```

## 高度な機能

### 部分的スタッシュ

```bash
# 対話的に選択してスタッシュ
git stash push -p

# 特定ファイルのみスタッシュ
git stash push -m "CSSのみ保存" -- styles.css

# 特定パスのファイルをスタッシュ
git stash push -m "フロントエンド変更" -- src/frontend/
```

### 未追跡ファイルの処理

```bash
# 未追跡ファイルも含める
git stash push -u -m "新規ファイル含む"

# .gitignoreファイルも含める
git stash push -a -m "全ファイル保存"
```

### スタッシュからブランチ作成

```bash
# スタッシュを新しいブランチとして作成
git stash branch new-feature stash@{1}
```

## ベストプラクティス

### 1. 分かりやすいメッセージ

```bash
❌ git stash
❌ git stash save "wip"

✅ git stash push -m "ユーザー認証機能：バリデーション実装中"
✅ git stash push -m "商品一覧画面：ページネーション追加中"
```

### 2. 定期的なスタッシュ整理

```bash
# 不要なスタッシュを削除
git stash drop stash@{3}

# 全スタッシュを削除（注意！）
git stash clear
```

### 3. スタッシュの内容確認習慣

```bash
# 適用前に必ず内容確認
git stash show -p stash@{0}

# 統計情報で概要把握
git stash show --stat stash@{1}
```

## 注意点とトラブルシューティング

### よくある問題

**1. スタッシュ適用時のコンフリクト**
```bash
# コンフリクトが発生した場合
git stash pop  # エラーが発生

# 手動でコンフリクト解決後
git add .
git stash drop stash@{0}  # 適用済みスタッシュを削除
```

**2. 間違ったスタッシュの適用**
```bash
# 直前の操作を取り消し
git reset --hard HEAD

# 正しいスタッシュを適用
git stash apply stash@{1}
```

**3. スタッシュの消失を防ぐ**
```bash
# apply使用で安全に確認
git stash apply stash@{0}

# 問題なければ削除
git stash drop stash@{0}
```

---

# 🚀 Git Stash チートシート

## 基本コマンド

| コマンド | 説明 |
|---------|------|
| `git stash` | 現在の変更をスタッシュ |
| `git stash push -m "メッセージ"` | メッセージ付きでスタッシュ |
| `git stash list` | スタッシュ一覧表示 |
| `git stash pop` | 最新スタッシュを適用して削除 |
| `git stash apply` | 最新スタッシュを適用（保持） |
| `git stash drop` | 最新スタッシュを削除 |
| `git stash clear` | 全スタッシュを削除 |

## 特定スタッシュ操作

| コマンド | 説明 |
|---------|------|
| `git stash show stash@{n}` | 特定スタッシュの概要表示 |
| `git stash show -p stash@{n}` | 特定スタッシュの詳細差分 |
| `git stash apply stash@{n}` | 特定スタッシュを適用 |
| `git stash pop stash@{n}` | 特定スタッシュを適用して削除 |
| `git stash drop stash@{n}` | 特定スタッシュを削除 |
| `git stash branch <name> stash@{n}` | スタッシュから新ブランチ作成 |

## オプション一覧

| オプション | 説明 |
|-----------|------|
| `-u, --include-untracked` | 未追跡ファイルも含める |
| `-a, --all` | .gitignoreファイルも含める |
| `-p, --patch` | 対話的に選択してスタッシュ |
| `-k, --keep-index` | インデックスを保持 |
| `-S, --staged` | ステージされた変更のみ |
| `--pathspec-from-file` | ファイルからパス指定 |

## よく使う組み合わせ

```bash
# 緊急作業パターン
git stash push -m "作業中断：緊急対応のため"
git checkout hotfix-branch
# ... 緊急作業 ...
git checkout -
git stash pop

# 実験パターン
git stash push -m "実験前の状態保存"
# ... 実験的変更 ...
git reset --hard HEAD
git stash pop

# 部分保存パターン
git stash push -p -m "一部機能のみ保存"

# 新機能ブランチ作成パターン
git stash branch feature/new-idea stash@{0}
```

## 🔥 頻出パターン集

### パターン1: 作業中断→緊急対応
```bash
git stash push -m "$(git branch --show-current): $(date '+%Y%m%d_%H%M') 作業中断"
git checkout master
git pull origin master
git checkout -b hotfix/issue-123
```

### パターン2: 実験的変更の保存
```bash
git stash push -m "実験: $(git log -1 --pretty=format:'%s') の改良案"
```

### パターン3: 定期バックアップ
```bash
git stash push -m "定期保存: $(date '+%Y/%m/%d %H:%M')"
```

## 💡 Pro Tips

- **スタッシュ番号は変動する**: 新しいスタッシュが追加されると既存の番号が増える
- **メッセージは詳細に**: 後で見返したときに内容がわかるように
- **apply → 確認 → drop**: 安全のため、まずapplyで確認してからdrop
- **定期的な整理**: 古いスタッシュは定期的に削除
- **ブランチ名を含める**: どのブランチでの作業かメッセージに含める

---

*最終更新: 2025年7月1日*
